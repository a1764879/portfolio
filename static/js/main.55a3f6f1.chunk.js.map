{"version":3,"sources":["components/AboutComponent.jsx","components/HomeComponent.jsx","components/MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["About","props","useStyles","makeStyles","theme","root","flexGrow","title","tabNameToIndex","0","1","indexToName","home","about","Home","match","history","page","params","classes","useState","selectedTab","setSelectedTab","className","AppBar","position","color","Toolbar","Typography","variant","Tabs","value","onChange","event","newValue","push","indicatorColor","scrollButtons","Tab","label","Container","Main","exact","path","render","to","Component","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAUeA,EAPD,SAAAC,GACV,OACI,wDCAFC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHD,SAAU,OAIZE,EAAiB,CACnBC,EAAG,OACHC,EAAG,SAGDC,EAAc,CAChBC,KAAM,EACNC,MAAO,GAsCIC,EAnCF,SAAAb,GAAU,IACZc,EAAkBd,EAAlBc,MAAOC,EAAWf,EAAXe,QAETC,EADcF,EAAXG,OACHD,KACDA,IACAA,EAAO,QAEX,IAAME,EAAUjB,IAPE,EAQmBkB,mBAAST,EAAYM,IARxC,mBAQXI,EARW,KAQEC,EARF,KAalB,OACI,yBAAKC,UAAWJ,EAAQd,MACpB,kBAACmB,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC5B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWJ,EAAQZ,OAA5C,QAGA,kBAACuB,EAAA,EAAD,CAAMC,MAAOV,EAAaW,SAXrB,SAACC,EAAOC,GACzBlB,EAAQmB,KAAK,IAAI3B,EAAe0B,IAChCZ,EAAeY,IAS+CE,eAAe,YAAYP,QAAQ,aAAaQ,cAAc,MAC5G,kBAACC,EAAA,EAAD,CAAKC,MAAM,SACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,aAIvB,kBAACC,EAAA,EAAD,KAEqB,IAAhBnB,GAAqB,kBAAC,EAAD,MACL,IAAhBA,GAAqB,kBAAC,EAAD,S,OCrCvBoB,E,uKAVP,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAAA3C,GAAK,OAAI,kBAAC,EAASA,MACvD,kBAAC,IAAD,CAAU4C,GAAG,gB,GANdC,aCUJC,MAVf,WACE,OACI,kBAAC,IAAD,KACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,SCIUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpC,MACvB,2DCZNqC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55a3f6f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst About = props => {\r\n    return(\r\n        <div>\r\n            Inside About Component\r\n        </div>\r\n    )\r\n}\r\nexport default About","import {AppBar, Container, Tab, Tabs, Toolbar, Typography} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport About from './AboutComponent'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst tabNameToIndex = {\r\n    0: 'home',\r\n    1: 'about'\r\n}\r\n\r\nconst indexToName = {\r\n    home: 0,\r\n    about: 1\r\n}\r\n\r\nconst Home = props => {\r\n    const {match, history} = props\r\n    const { params } = match\r\n    let {page} = params\r\n    if(!page){\r\n        page = \"home\"\r\n    }\r\n    const classes = useStyles()\r\n    const [selectedTab, setSelectedTab] =useState(indexToName[page])\r\n    const handleChange = (event, newValue) => {\r\n        history.push('/'+tabNameToIndex[newValue])\r\n        setSelectedTab(newValue);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" color=\"primary\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Temp\r\n                    </Typography>\r\n                    <Tabs value={selectedTab} onChange={handleChange} indicatorColor=\"secondary\" variant=\"scrollable\" scrollButtons=\"on\">\r\n                        <Tab label=\"Home\" />\r\n                        <Tab label=\"About\" />\r\n                    </Tabs>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n\r\n                {selectedTab === 0 && <About/>}\r\n                {selectedTab === 1 && <About/>}\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path=\"/:page?\" render={props => <Home {...props}/>}/>\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Main","import React from 'react';\nimport { BrowserRouter} from \"react-router-dom\";\nimport Main from './components/MainComponent'\n\nfunction App() {\n  return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Main/>\n        </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}